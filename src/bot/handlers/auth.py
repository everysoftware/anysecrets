from aiogram import types, Router, F, Bot
from aiogram.fsm.context import FSMContext

from bot.middlewares import DatabaseMd
from bot.structures.fsm import RegisterGroup, LoginGroup, MainGroup
from bot.structures.keyboards import get_login_kb, get_main_kb
from src.db import Database
from .additional import edit_last_msg, update_last_msg, delete_last_msg

auth_router = Router(name='auth')
auth_router.message.middleware(DatabaseMd())


@auth_router.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚úîÔ∏è', RegisterGroup.button_step)
async def reg_button_step(msg: types.Message, state: FSMContext) -> None:
    sent_msg = await msg.answer('<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –®–∞–≥ 1</b>\n\n–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å ‚¨áÔ∏è')
    await state.set_state(RegisterGroup.entering_password)
    await update_last_msg(sent_msg, state)


@auth_router.message(RegisterGroup.entering_password)
async def reg_entering_password(msg: types.Message, state: FSMContext, bot: Bot) -> None:
    await state.update_data(password=msg.text)
    await msg.delete()

    user_data = await state.get_data()
    await edit_last_msg(bot, user_data, state,
                        '<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –®–∞–≥ 2</b>\n\n–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–¥–µ–∂–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å ‚¨áÔ∏è\n\n<b><i>–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å '
                        '–¥–∞—ë—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≤–∞—à–∏–º –ø–∞—Ä–æ–ª—è–º. –î–µ—Ä–∂–∏—Ç–µ –µ–≥–æ –≤ —Å–µ–∫—Ä–µ—Ç–µ ‚ùóÔ∏è</i></b>')
    await state.set_state(RegisterGroup.entering_master)


@auth_router.message(RegisterGroup.entering_master)
async def reg_entering_master(msg: types.Message, state: FSMContext, db: Database, bot: Bot) -> None:
    user_data = await state.get_data()

    async with db.session.begin():
        await db.user.register(
            db=db,
            user_id=msg.from_user.id,
            first_name=msg.from_user.first_name,
            last_name=msg.from_user.last_name,
            username=msg.from_user.username,
            language_code=msg.from_user.language_code,
            password=user_data['password'],
            master=msg.text,
        )

    await msg.delete()

    await delete_last_msg(bot, user_data)
    await msg.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º üòä\n\n'
                     '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è üëá',
                     reply_markup=get_login_kb())
    await state.clear()
    await state.set_state(LoginGroup.button_step)


@auth_router.message(F.text == '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è üòá', LoginGroup.button_step)
async def login_button_step(msg: types.Message, state: FSMContext) -> None:
    sent_msg = await msg.answer('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å ‚¨áÔ∏è')
    await state.set_state(LoginGroup.entering_password)
    await update_last_msg(sent_msg, state)


@auth_router.message(LoginGroup.entering_password)
async def login_entering_password(msg: types.Message, state: FSMContext, db: Database, bot: Bot) -> None:
    await msg.delete()

    user_data = await state.get_data()

    async with db.session.begin():
        if await db.user.login(msg.from_user.id, msg.text):
            await delete_last_msg(bot, user_data)
            await msg.answer('–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚úÖ',
                             reply_markup=get_main_kb())
            await state.clear()
            await state.set_state(MainGroup.main_menu)
        else:
            await edit_last_msg(bot, user_data, state, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ ‚¨áÔ∏è')
