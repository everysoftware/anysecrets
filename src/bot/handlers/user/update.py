from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from src.bot.encryption import hash_data
from src.bot.fsm import MainGroup
from src.bot.fsm import ProfilePasswordEditingGroup
from src.bot.utils.messages import Interactive
from src.db import Database
from src.db.models import AuthData

router = Router(name='profile_update')


@router.message(MainGroup.viewing_profile, F.text == '–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å üîë')
async def type_old_password(message: types.Message, state: FSMContext) -> None:
    await Interactive.start(
        message, state,
        new_state=ProfilePasswordEditingGroup.typing_old_password,
        text='–í–≤–µ–¥–∏ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å ‚¨áÔ∏è'
    )


@router.message(ProfilePasswordEditingGroup.typing_old_password)
async def type_new_password(message: types.Message, state: FSMContext, db: Database) -> None:
    text = message.text

    if not await db.user.authorize(message.from_user.id, text):
        return await Interactive.switch(
            message, state,
            text='–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –í–≤–µ–¥–∏ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å ‚¨áÔ∏è'
        )

    await Interactive.switch(
        message, state,
        new_state=ProfilePasswordEditingGroup.typing_new_password,
        text='–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å ‚¨áÔ∏è'
    )


@router.message(ProfilePasswordEditingGroup.typing_new_password)
async def update_password(message: types.Message, state: FSMContext, db: Database) -> None:
    text = message.text

    async with db.session.begin():
        user = await db.user.get(message.from_user.id)
        auth_data: AuthData = user.auth_data
        auth_data.account_password = hash_data(text, auth_data.salt)[0]
        await db.auth_data.merge(auth_data)

    await Interactive.finish(
        message, state,
        new_state=MainGroup.viewing_profile,
        text='–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω ‚úÖ'
    )


@router.message(MainGroup.viewing_profile, F.text == '–°–º–µ–Ω–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å üóù')
async def type_old_master(message: types.Message) -> None:
    await message.answer(
        '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!',
    )
    # await Interactive.start(
    #     message, state,
    #     new_state=ProfilePasswordEditingGroup.typing_old_password,
    #     text='–í–≤–µ–¥–∏ —Å—Ç–∞—Ä—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å ‚¨áÔ∏è'
    # )
