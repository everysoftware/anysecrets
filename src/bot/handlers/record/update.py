from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from src.bot.encryption import encrypt_data
from src.bot.fsm import MainGroup, RecordActionsGroup, RecordEditingGroup
from src.bot.keyboards import UPDATE_RECORD_KB
from src.bot.utils.messages import Interactive
from src.db import Database
from src.db.models import Comment

router = Router(name='record_editing')


@router.callback_query(F.data == 'edit_record', MainGroup.viewing_record)
async def edit_record(call: types.CallbackQuery, state: FSMContext) -> None:
    sent_msg = await call.message.answer(
        '–í—ã–±–µ—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∑–∞–ø–∏—Å–∏ üîΩ',
        reply_markup=UPDATE_RECORD_KB
    )
    await state.update_data(record_editing_message_id=sent_msg.message_id)
    await state.set_state(RecordActionsGroup.editing_record)

    await call.answer()


@router.callback_query(F.data == 'update_title', RecordActionsGroup.editing_record)
async def type_title(call: types.CallbackQuery, state: FSMContext) -> None:
    await Interactive.start(
        call.message, state,
        new_state=RecordEditingGroup.updating_title,
        text='–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è —Å–∞–π—Ç–∞ ‚¨áÔ∏è'
    )

    await call.answer()


@router.message(RecordEditingGroup.updating_title)
async def update_title(message: types.Message, state: FSMContext, db: Database) -> None:
    text = message.text.strip()
    user_data = await state.get_data()

    if len(text) > 64:
        return await Interactive.switch(
            message, state,
            user_data=user_data,
            text='–ò–º—è –≤–µ–±-—Å–∞–π—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 64 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è —Å–∞–π—Ç–∞ ‚¨áÔ∏è',
        )

    async with db.session.begin():
        record = await db.record.get(user_data['record_id'])
        record.title = text
        await db.record.merge(record)

    await message.chat.delete_message(user_data['record_editing_message_id'])

    await Interactive.finish(
        message, state,
        user_data=user_data,
        new_state=MainGroup.viewing_record,
        text='–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ',
        state_clear=False
    )


@router.callback_query(F.data == 'update_username', RecordActionsGroup.editing_record)
async def type_username(call: types.CallbackQuery, state: FSMContext) -> None:
    await Interactive.start(
        call.message, state,
        new_state=RecordEditingGroup.updating_username,
        text='–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚¨áÔ∏è'
    )

    await call.answer()


@router.message(RecordEditingGroup.updating_username)
async def update_username(message: types.Message, state: FSMContext, db: Database) -> None:
    text = message.text.strip()
    user_data = await state.get_data()

    if len(text) > 64:
        return await Interactive.switch(
            message, state,
            user_data=user_data,
            text='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 64 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚¨áÔ∏è',
        )

    async with db.session.begin():
        record = await db.record.get(user_data['record_id'])
        record.username = encrypt_data(text, user_data['master'], record.salt)[0]
        await db.record.merge(record)

    await message.chat.delete_message(user_data['record_editing_message_id'])

    await Interactive.finish(
        message, state,
        user_data=user_data,
        new_state=MainGroup.viewing_record,
        text='–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ',
        state_clear=False
    )


@router.callback_query(F.data == 'update_password', RecordActionsGroup.editing_record)
async def type_password(call: types.CallbackQuery, state: FSMContext) -> None:
    await Interactive.start(
        call.message, state,
        new_state=RecordEditingGroup.updating_password,
        text='–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å ‚¨áÔ∏è'
    )

    await call.answer()


@router.message(RecordEditingGroup.updating_password)
async def update_password(message: types.Message, state: FSMContext, db: Database) -> None:
    text = message.text.strip()
    user_data = await state.get_data()

    if len(text) > 64:
        return await Interactive.switch(
            message, state,
            user_data=user_data,
            text='–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 64 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å ‚¨áÔ∏è',
        )

    async with db.session.begin():
        record = await db.record.get(user_data['record_id'])
        record.password_ = encrypt_data(text, user_data['master'], record.salt)[0]
        await db.record.merge(record)

    await message.chat.delete_message(user_data['record_editing_message_id'])

    await Interactive.finish(
        message, state,
        user_data=user_data,
        new_state=MainGroup.viewing_record,
        text='–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ',
        state_clear=False
    )


@router.callback_query(F.data == 'update_url', RecordActionsGroup.editing_record)
async def type_url(call: types.CallbackQuery, state: FSMContext) -> None:
    await Interactive.start(
        call.message, state,
        new_state=RecordEditingGroup.updating_url,
        text='–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–µ–±-—Å–∞–π—Ç ‚¨áÔ∏è'
    )

    await call.answer()


@router.message(RecordEditingGroup.updating_url)
async def update_url(message: types.Message, state: FSMContext, db: Database) -> None:
    text = message.text.strip()
    user_data = await state.get_data()

    if len(text) > 64:
        return await Interactive.switch(
            message, state,
            user_data=user_data,
            text='–í–µ–±-—Å–∞–π—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 64 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–µ–±-—Å–∞–π—Ç ‚¨áÔ∏è'
        )

    async with db.session.begin():
        record = await db.record.get(user_data['record_id'])
        record.url = text
        await db.record.merge(record)

    await message.chat.delete_message(user_data['record_editing_message_id'])

    await Interactive.finish(
        message, state,
        user_data=user_data,
        new_state=MainGroup.viewing_record,
        text='–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ',
        state_clear=False
    )


@router.callback_query(F.data == 'update_comment', RecordActionsGroup.editing_record)
async def type_comment(call: types.CallbackQuery, state: FSMContext) -> None:
    await Interactive.start(
        call.message, state,
        new_state=RecordEditingGroup.updating_comment,
        text='–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚¨áÔ∏è'
    )

    await call.answer()


@router.message(RecordEditingGroup.updating_comment)
async def update_comment(message: types.Message, state: FSMContext, db: Database) -> None:
    text = message.text.strip()
    user_data = await state.get_data()

    if len(text) > 256:
        return await Interactive.switch(
            message, state,
            user_data=user_data,
            text='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 256 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚¨áÔ∏è'
        )

    async with db.session.begin():
        record = await db.record.get(user_data['record_id'])

        if record.comment is None:
            record.comment = db.comment.new(text=text)
            await db.record.merge(record)
        else:
            comment: Comment = record.comment
            comment.text = text
            await db.comment.merge(comment)

    await message.chat.delete_message(user_data['record_editing_message_id'])

    await Interactive.finish(
        message, state,
        user_data=user_data,
        new_state=MainGroup.viewing_record,
        text='–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ',
        state_clear=False
    )
