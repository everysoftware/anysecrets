"""fix id's overflow

Revision ID: 3ace414026c8
Revises: 90c0f49fd9e9
Create Date: 2023-10-19 01:36:46.416710

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = '3ace414026c8'
down_revision: Union[str, None] = '90c0f49fd9e9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """
    Оказывается, user_id в телеграме 64-битный, поэтому хранить в 32 битах не выйдет.
    Миграция назад не нужна и невозможна.
    :return:
    """
    pass
    # ### commands auto generated by Alembic - please adjust! ###
    # op.alter_column('auth_data', 'user_id',
    #                 existing_type=sa.INTEGER(),
    #                 type_=sa.BigInteger(),
    #                 existing_nullable=False)
    # op.alter_column('comments', 'record_id',
    #                 existing_type=sa.INTEGER(),
    #                 type_=sa.BigInteger(),
    #                 existing_nullable=False)
    # op.alter_column('records', 'id',
    #                 existing_type=sa.INTEGER(),
    #                 type_=sa.BigInteger(),
    #                 existing_nullable=False,
    #                 autoincrement=True,
    #                 existing_server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1,
    #                                                     maxvalue=2147483647, cycle=False, cache=1))
    # op.alter_column('records', 'user_id',
    #                 existing_type=sa.INTEGER(),
    #                 type_=sa.BigInteger(),
    #                 existing_nullable=True)
    # op.alter_column('users', 'id',
    #                 existing_type=sa.INTEGER(),
    #                 type_=sa.BigInteger(),
    #                 existing_nullable=False,
    #                 existing_server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1,
    #                                                     maxvalue=2147483647, cycle=False, cache=1))
    # op.alter_column('users', 'user_id',
    #                 existing_type=sa.INTEGER(),
    #                 type_=sa.BigInteger(),
    #                 existing_nullable=False,
    #                 autoincrement=True,
    #                 existing_server_default=sa.text("nextval('users_user_id_seq'::regclass)"))
    # ### end Alembic commands ###


def downgrade() -> None:
    pass
    # ### commands auto generated by Alembic - please adjust! ###
    # op.alter_column('users', 'user_id',
    #                 existing_type=sa.BigInteger(),
    #                 type_=sa.INTEGER(),
    #                 existing_nullable=False,
    #                 autoincrement=True,
    #                 existing_server_default=sa.text("nextval('users_user_id_seq'::regclass)"))
    # op.alter_column('users', 'id',
    #                 existing_type=sa.BigInteger(),
    #                 type_=sa.INTEGER(),
    #                 existing_nullable=False,
    #                 existing_server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1,
    #                                                     maxvalue=2147483647, cycle=False, cache=1))
    # op.alter_column('records', 'user_id',
    #                 existing_type=sa.BigInteger(),
    #                 type_=sa.INTEGER(),
    #                 existing_nullable=True)
    # op.alter_column('records', 'id',
    #                 existing_type=sa.BigInteger(),
    #                 type_=sa.INTEGER(),
    #                 existing_nullable=False,
    #                 autoincrement=True,
    #                 existing_server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1,
    #                                                     maxvalue=2147483647, cycle=False, cache=1))
    # op.alter_column('comments', 'record_id',
    #                 existing_type=sa.BigInteger(),
    #                 type_=sa.INTEGER(),
    #                 existing_nullable=False)
    # op.alter_column('auth_data', 'user_id',
    #                 existing_type=sa.BigInteger(),
    #                 type_=sa.INTEGER(),
    #                 existing_nullable=False)
    # ### end Alembic commands ###
